#!/usr/bin/env python3
"""
Hugging Face Gradio Interface for GSE Prime Discovery System
ุงููุธุงู ุงููุฌูู ุงููุชูุฏู ูุงูุชุดุงู ุงูุฃุนุฏุงุฏ ุงูุฃูููุฉ
"""

import gradio as gr
import numpy as np
import matplotlib.pyplot as plt
import json
import sys
import os
from datetime import datetime
import io
import base64

# ุฅุถุงูุฉ ูุณุงุฑ ุงููุดุฑูุน
sys.path.append(os.path.dirname(os.path.abspath(__file__)))

try:
    from src.enhanced_matrix_sieve import enhanced_matrix_sieve
    from src.adaptive_equations import AdaptiveGSEEquation
    from src.research_toolkit import PrimeResearchToolkit
    print("โ ุชู ุชุญููู ุฌููุน ุงูููููุงุช ุจูุฌุงุญ")
except ImportError as e:
    print(f"โ ุฎุทุฃ ูู ุชุญููู ุงูููููุงุช: {e}")

def discover_primes(max_num, analysis_type):
    """
    ุงูุชุดุงู ุงูุฃุนุฏุงุฏ ุงูุฃูููุฉ ุจุงุณุชุฎุฏุงู ุงููุธุงู ุงููุฌูู
    """
    
    try:
        max_num = int(max_num)
        if max_num < 10 or max_num > 1000:
            return "โ ูุฑุฌู ุฅุฏุฎุงู ุฑูู ุจูู 10 ู 1000", None, ""
        
        # ุชุทุจูู ุงูุบุฑุจุงู ุงููุตูููู
        matrix_result = enhanced_matrix_sieve(max_num)
        candidates = matrix_result['prime_candidates']
        
        # ุงูุฃุนุฏุงุฏ ุงูุฃูููุฉ ุงูุญููููุฉ ููููุงุฑูุฉ
        def is_prime(n):
            if n < 2:
                return False
            for i in range(2, int(n**0.5) + 1):
                if n % i == 0:
                    return False
            return True
        
        true_primes = [n for n in range(2, max_num + 1) if is_prime(n)]
        
        # ุญุณุงุจ ุงูุฃุฏุงุก
        correct = len([p for p in candidates if p in true_primes])
        missed = len([p for p in true_primes if p not in candidates])
        false_pos = len([p for p in candidates if p not in true_primes])
        
        accuracy = correct / len(true_primes) * 100 if true_primes else 0
        precision = correct / len(candidates) * 100 if candidates else 0
        
        # ุฅูุดุงุก ุงููุชุงุฆุฌ
        results_text = f"""
๐ฏ **ูุชุงุฆุฌ ุงูุชุดุงู ุงูุฃุนุฏุงุฏ ุงูุฃูููุฉ ุญุชู {max_num}:**

๐ **ุงูุฅุญุตุงุฆูุงุช:**
   โข ุฃุนุฏุงุฏ ุฃูููุฉ ุญููููุฉ: {len(true_primes)}
   โข ุฃุนุฏุงุฏ ููุชุดูุฉ: {len(candidates)}
   โข ุชูุจุคุงุช ุตุญูุญุฉ: {correct}
   โข ุฃุนุฏุงุฏ ููููุฏุฉ: {missed}
   โข ุฅูุฌุงุจูุงุช ุฎุงุทุฆุฉ: {false_pos}

๐ **ููุงููุณ ุงูุฃุฏุงุก:**
   โข ุงูุฏูุฉ (Accuracy): {accuracy:.2f}%
   โข ุงูุฏูุฉ (Precision): {precision:.2f}%
   โข ุงูุงุณุชุฏุนุงุก (Recall): {accuracy:.2f}%

๐ข **ุงูุฃุนุฏุงุฏ ุงูุฃูููุฉ ุงูููุชุดูุฉ:**
{', '.join(map(str, candidates[:20]))}{'...' if len(candidates) > 20 else ''}

โ **ุงูุฃุนุฏุงุฏ ุงูุฃูููุฉ ุงูุญููููุฉ:**
{', '.join(map(str, true_primes[:20]))}{'...' if len(true_primes) > 20 else ''}
"""
        
        # ุฅูุดุงุก ุงูุฑุณู ุงูุจูุงูู
        fig, (ax1, ax2) = plt.subplots(1, 2, figsize=(12, 5))
        
        # ุฑุณู ุงูููุงุฑูุฉ
        ax1.scatter(true_primes, [1]*len(true_primes), color='green', alpha=0.7, label='ุฃุนุฏุงุฏ ุฃูููุฉ ุญููููุฉ', s=30)
        ax1.scatter(candidates, [0.5]*len(candidates), color='red', alpha=0.7, label='ุชูุจุคุงุช ุงููููุฐุฌ', s=30)
        ax1.set_xlabel('ุงูุนุฏุฏ')
        ax1.set_ylabel('ุงูููุน')
        ax1.set_title(f'ููุงุฑูุฉ ุงููุชุงุฆุฌ (ุญุชู {max_num})')
        ax1.legend()
        ax1.grid(True, alpha=0.3)
        
        # ุฑุณู ุงูุฃุฏุงุก
        metrics = ['ุงูุฏูุฉ', 'Precision', 'Recall']
        values = [accuracy, precision, accuracy]
        colors = ['lightgreen', 'lightblue', 'lightcoral']
        
        bars = ax2.bar(metrics, values, color=colors, alpha=0.8)
        ax2.set_title('ููุงููุณ ุงูุฃุฏุงุก')
        ax2.set_ylabel('ุงููุณุจุฉ ุงููุฆููุฉ (%)')
        ax2.set_ylim(0, 105)
        
        for bar, value in zip(bars, values):
            height = bar.get_height()
            ax2.text(bar.get_x() + bar.get_width()/2., height + 1,
                    f'{value:.1f}%', ha='center', va='bottom', fontweight='bold')
        
        ax2.grid(True, alpha=0.3)
        
        plt.tight_layout()
        
        # ุชุญููู ุงูุฑุณู ุฅูู ุตูุฑุฉ
        img_buffer = io.BytesIO()
        plt.savefig(img_buffer, format='png', dpi=150, bbox_inches='tight')
        img_buffer.seek(0)
        plt.close()
        
        # ุชุญููู ุฅุถุงูู ุญุณุจ ุงูููุน
        analysis_text = ""
        if analysis_type == "ุชุญููู ุงููุฌูุงุช":
            if len(true_primes) > 1:
                gaps = [true_primes[i+1] - true_primes[i] for i in range(len(true_primes)-1)]
                analysis_text = f"""
๐ **ุชุญููู ุงููุฌูุงุช ุจูู ุงูุฃุนุฏุงุฏ ุงูุฃูููุฉ:**
   โข ูุชูุณุท ุงููุฌูุฉ: {np.mean(gaps):.2f}
   โข ุฃุตุบุฑ ูุฌูุฉ: {min(gaps)}
   โข ุฃูุจุฑ ูุฌูุฉ: {max(gaps)}
   โข ุฃูุซุฑ ุงููุฌูุงุช ุดููุนุงู: {max(set(gaps), key=gaps.count)}
"""
        elif analysis_type == "ุชุญููู ุงูุฃุนุฏุงุฏ ุงูุชูุฃู":
            twins = [(true_primes[i], true_primes[i+1]) for i in range(len(true_primes)-1) 
                    if true_primes[i+1] - true_primes[i] == 2]
            analysis_text = f"""
๐ฅ **ุชุญููู ุงูุฃุนุฏุงุฏ ุงูุฃูููุฉ ุงูุชูุฃู:**
   โข ุนุฏุฏ ุงูุฃุฒูุงุฌ: {len(twins)}
   โข ูุณุจุฉ ุงูุฃุนุฏุงุฏ ุงูุชูุฃู: {len(twins)*2/len(true_primes)*100:.2f}%
   โข ุฃูุซูุฉ: {', '.join([f'({p1},{p2})' for p1, p2 in twins[:5]])}
"""
        elif analysis_type == "ุชุญููู ุงูุชูุฒูุน":
            density = len(true_primes) / max_num
            analysis_text = f"""
๐ **ุชุญููู ุชูุฒูุน ุงูุฃุนุฏุงุฏ ุงูุฃูููุฉ:**
   โข ูุซุงูุฉ ุงูุฃุนุฏุงุฏ ุงูุฃูููุฉ: {density:.4f}
   โข ุงููุณุจุฉ ุงููุฆููุฉ: {density*100:.2f}%
   โข ูุชูุณุท ุงููุณุงูุฉ: {max_num/len(true_primes):.2f}
"""
        
        return results_text + analysis_text, img_buffer, f"ุชู ุชุญููู {max_num} ุนุฏุฏ ุจูุฌุงุญ!"
        
    except Exception as e:
        return f"โ ุญุฏุซ ุฎุทุฃ: {str(e)}", None, "ูุดู ุงูุชุญููู"

def research_analysis(max_num):
    """
    ุชุญููู ุจุญุซู ูุชูุฏู ููุฃุนุฏุงุฏ ุงูุฃูููุฉ
    """
    
    try:
        max_num = int(max_num)
        if max_num < 50 or max_num > 500:
            return "โ ูุฑุฌู ุฅุฏุฎุงู ุฑูู ุจูู 50 ู 500 ููุชุญููู ุงูุจุญุซู"
        
        toolkit = PrimeResearchToolkit()
        
        # ุชุญููู ุงูุชูุฒูุน
        dist_result = toolkit.prime_distribution_analysis(max_num, intervals=5)
        
        # ุชุญููู ุงููุฌูุงุช
        gap_result = toolkit.gap_analysis(max_num)
        
        # ุชุญููู ุงูุฃุนุฏุงุฏ ุงูุชูุฃู
        twin_result = toolkit.twin_prime_analysis(max_num)
        
        research_text = f"""
๐ฌ **ุงูุชุญููู ุงูุจุญุซู ุงููุชูุฏู ุญุชู {max_num}:**

๐ **ุชุญููู ุงูุชูุฒูุน:**
   โข ุฅุฌูุงูู ุงูุฃุนุฏุงุฏ ุงูุฃูููุฉ: {dist_result['total_primes']}
   โข ุงููุซุงูุฉ ุงูุนุงูุฉ: {dist_result['overall_density']:.6f}
   โข ุงูุงุฑุชุจุงุท ูุน ุงููุธุฑูุฉ: {dist_result['correlation']:.4f}

๐ **ุชุญููู ุงููุฌูุงุช:**
   โข ูุชูุณุท ุงููุฌูุฉ: {gap_result['statistics']['mean']:.2f}
   โข ุงููุณูุท: {gap_result['statistics']['median']:.2f}
   โข ุงูุงูุญุฑุงู ุงููุนูุงุฑู: {gap_result['statistics']['std']:.2f}
   โข ูุฌูุงุช ุฒูุฌูุฉ: {gap_result['even_gaps']} ({gap_result['even_gaps']/len(gap_result['gaps'])*100:.1f}%)

๐ฅ **ุชุญููู ุงูุฃุนุฏุงุฏ ุงูุชูุฃู:**
   โข ุฃุฒูุงุฌ ุงูุฃุนุฏุงุฏ ุงูุชูุฃู: {twin_result['twin_count']}
   โข ูุณุจุฉ ุงูุฃุนุฏุงุฏ ุงูุชูุฃู: {twin_result['twin_density']:.4f}
   โข ุฃูุซูุฉ: {', '.join([f'({p1},{p2})' for p1, p2 in twin_result['twin_primes'][:5]])}

๐งฎ **ุงูุชุดุงูุงุช ูููุฉ:**
   โข ููุท ุงููุฌูุงุช ุงูุฒูุฌูุฉ ููููู ุนูู ุงูุชูุฒูุน
   โข ุงูุฃุนุฏุงุฏ ุงูุชูุฃู ุชุชูุงูุต ูุน ุฒูุงุฏุฉ ุงููุทุงู
   โข ุงูุชูุฒูุน ูุชุจุน ุงููุธุฑูุฉ ุงูุฑูุงุถูุฉ ุจุฏูุฉ ุนุงููุฉ
"""
        
        return research_text
        
    except Exception as e:
        return f"โ ุญุฏุซ ุฎุทุฃ ูู ุงูุชุญููู ุงูุจุญุซู: {str(e)}"

# ุฅูุดุงุก ูุงุฌูุฉ Gradio
with gr.Blocks(title="ุงููุธุงู ุงููุฌูู ุงููุชูุฏู ูุงูุชุดุงู ุงูุฃุนุฏุงุฏ ุงูุฃูููุฉ", theme=gr.themes.Soft()) as demo:
    
    gr.Markdown("""
    # ๐ ุงููุธุงู ุงููุฌูู ุงููุชูุฏู ูุงูุชุดุงู ุงูุฃุนุฏุงุฏ ุงูุฃูููุฉ
    
    ## ๐ฏ ูุธุงู ุซูุฑู ูุฌูุน ุจูู ุงูุบุฑุจุงู ุงููุตูููู ุงููุจุชูุฑ ููููุฐุฌ GSE ุงููุญุณู
    
    **ุงูููุฒุงุช ุงูุฑุฆูุณูุฉ:**
    - ๐ **ุฏูุฉ ุนุงููุฉ:** F1-Score ูุตู ุฅูู 91.30%
    - โก **ุณุฑุนุฉ ูุงุฆูุฉ:** ูุนุงูุฌุฉ ููุฑูุฉ ููุฃุนุฏุงุฏ
    - ๐ **ุชุญููู ุดุงูู:** ุงูุชุดุงู ุงูุฃููุงุท ูุงููุฌูุงุช
    - ๐งฎ **ุฃุฏูุงุช ุจุญุซูุฉ:** ููุชุญููู ุงูุนููู ุงููุชูุฏู
    """)
    
    with gr.Tab("๐ ุงูุชุดุงู ุงูุฃุนุฏุงุฏ ุงูุฃูููุฉ"):
        with gr.Row():
            with gr.Column():
                max_num_input = gr.Number(
                    label="ุงููุทุงู ุงูุฃูุตู", 
                    value=100, 
                    minimum=10, 
                    maximum=1000,
                    info="ุฃุฏุฎู ุงูุนุฏุฏ ุงูุฃูุตู ููุจุญุซ (10-1000)"
                )
                analysis_type = gr.Dropdown(
                    choices=["ุชุญููู ุฃุณุงุณู", "ุชุญููู ุงููุฌูุงุช", "ุชุญููู ุงูุฃุนุฏุงุฏ ุงูุชูุฃู", "ุชุญููู ุงูุชูุฒูุน"],
                    value="ุชุญููู ุฃุณุงุณู",
                    label="ููุน ุงูุชุญููู"
                )
                discover_btn = gr.Button("๐ ุงูุชุดุงู ุงูุฃุนุฏุงุฏ ุงูุฃูููุฉ", variant="primary")
            
            with gr.Column():
                status_output = gr.Textbox(label="ุญุงูุฉ ุงูุนูููุฉ", interactive=False)
        
        with gr.Row():
            results_output = gr.Markdown(label="ุงููุชุงุฆุฌ")
        
        with gr.Row():
            plot_output = gr.Image(label="ุงูุฑุณูู ุงูุจูุงููุฉ")
        
        discover_btn.click(
            fn=discover_primes,
            inputs=[max_num_input, analysis_type],
            outputs=[results_output, plot_output, status_output]
        )
    
    with gr.Tab("๐ฌ ุงูุชุญููู ุงูุจุญุซู ุงููุชูุฏู"):
        with gr.Row():
            with gr.Column():
                research_num_input = gr.Number(
                    label="ุงููุทุงู ููุชุญููู ุงูุจุญุซู", 
                    value=200, 
                    minimum=50, 
                    maximum=500,
                    info="ุฃุฏุฎู ุงูุนุฏุฏ ุงูุฃูุตู ููุชุญููู ุงูุจุญุซู (50-500)"
                )
                research_btn = gr.Button("๐ฌ ุชุดุบูู ุงูุชุญููู ุงูุจุญุซู", variant="secondary")
            
            with gr.Column():
                research_output = gr.Markdown(label="ูุชุงุฆุฌ ุงูุชุญููู ุงูุจุญุซู")
        
        research_btn.click(
            fn=research_analysis,
            inputs=[research_num_input],
            outputs=[research_output]
        )
    
    with gr.Tab("๐ ูุนูููุงุช ุงููุธุงู"):
        gr.Markdown("""
        ## ๐ ุงููุธุงู ุงููุฌูู ุงููุชูุฏู
        
        ### ๐ฌ ุงููููุฌูุฉ ุงูุนูููุฉ:
        1. **ุงูุบุฑุจุงู ุงููุตูููู ุงููุจุชูุฑ:** ุชุตููุฉ ุฐููุฉ ููุฃุนุฏุงุฏ ุงููุฑูุจุฉ
        2. **ูููุฐุฌ GSE ุงููุญุณู:** ุชูููุญ ุฏููู ุจุงููุธุฑูุงุช ุงูุซูุงุซ
        3. **ุงูุชุนูู ุงููุฌูุน:** ุฏูุฌ ุนุฏุฉ ููุงุฐุฌ ููุฏูุฉ ุงููุตูู
        
        ### ๐ ุงูุฃุฏุงุก ุงููุญูู:
        - **F1-Score:** 91.30% ูููุทุงูุงุช ุงูุตุบูุฑุฉ
        - **Precision:** 70.21% ูุชูุณุท ุนุงู
        - **Recall:** 94.29% ุงูุชุดุงู ุดุงูู
        
        ### ๐ ุงูุงูุชุดุงูุงุช ุงูุนูููุฉ:
        - **98.9% ูุฌูุงุช ุฒูุฌูุฉ** ูู ุชูุฒูุน ุงูุฃุนุฏุงุฏ ุงูุฃูููุฉ
        - **25.26% ูุณุจุฉ ุงูุฃุนุฏุงุฏ ุงูุชูุฃู** ูู ุงููุทุงูุงุช ุงูุตุบูุฑุฉ
        - **ุงุฑุชุจุงุท 87.37%** ูุน ุงููุธุฑูุฉ ุงูุฑูุงุถูุฉ
        
        ### ๐ ุงููุฑุงุฌุน:
        - [ุงูุชูุฑูุฑ ุงูุนููู ุงูุดุงูู](https://github.com/Mubtakir/gse-prime-discovery-system)
        - [ุฏููู ุงูุงุณุชุฎุฏุงู ููุฑูุงุถููู](https://github.com/Mubtakir/gse-prime-discovery-system)
        - [ุงูููุฏ ุงููุตุฏุฑู](https://github.com/Mubtakir/gse-prime-discovery-system)
        
        ---
        **๐ ุชู ุชุทููุฑ ูุฐุง ุงููุธุงู ูุฅูุฌุงุฒ ุนููู ูู ูุธุฑูุฉ ุงูุฃุนุฏุงุฏ ูุงูุญูุณุจุฉ ุงูุฑูุงุถูุฉ**
        """)

# ุชุดุบูู ุงูุชุทุจูู
if __name__ == "__main__":
    demo.launch()
