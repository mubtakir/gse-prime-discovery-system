#!/usr/bin/env python3
"""
ุงูุบุฑุจุงู ุงููุตูููู ุงููุญุณู
ุชุทููุฑ ุงูููุฑุฉ ุงูุฃุตููุฉ ูุน ุฅุตูุงุญ ุงููุดุงูู ูุชุญุณูู ุงูุฃุฏุงุก
"""

import numpy as np
import matplotlib.pyplot as plt
from datetime import datetime
import sys
import os

def enhanced_matrix_sieve(max_num=200):
    """
    ุงูุบุฑุจุงู ุงููุตูููู ุงููุญุณู ูุน ุฅุตูุงุญ ูุดููุฉ ุญุฌู ุงููุตูููุฉ
    """
    
    print(f"๐ ุงูุบุฑุจุงู ุงููุตูููู ุงููุญุณู ุญุชู {max_num}")
    print("="*60)
    
    # ุงูุฎุทูุฉ 1: ุงูุญุตูู ุนูู ุงูุฃุนุฏุงุฏ ุงููุฑุฏูุฉ
    odd_numbers = [n for n in range(3, max_num + 1, 2)]
    print(f"๐ ุงูุฃุนุฏุงุฏ ุงููุฑุฏูุฉ: {len(odd_numbers)} ุนุฏุฏ")
    
    # ุงูุฎุทูุฉ 2: ุชุญุฏูุฏ ุญุฌู ุงููุตูููุฉ ุงูููุงุณุจ
    # ูุญุชุงุฌ ุฌููุน ุงูุฃุนุฏุงุฏ ุงูุฃูููุฉ ุญุชู โmax_num
    sqrt_max = int(np.sqrt(max_num)) + 1
    
    # ุฅูุฌุงุฏ ุงูุฃุนุฏุงุฏ ุงูุฃูููุฉ ุงูุตุบูุฑุฉ ุฃููุงู (ูููุตูููุฉ)
    def is_prime_simple(n):
        if n < 2:
            return False
        for i in range(2, int(n**0.5) + 1):
            if n % i == 0:
                return False
        return True
    
    # ุงูุฃุนุฏุงุฏ ุงูุฃูููุฉ ุงููุฑุฏูุฉ ูููุตูููุฉ
    prime_odds_for_matrix = [n for n in range(3, sqrt_max + 1, 2) if is_prime_simple(n)]
    
    # ุฅุถุงูุฉ ุจุนุถ ุงูุฃุนุฏุงุฏ ุงููุฑูุจุฉ ุงููุฑุฏูุฉ ุงูุตุบูุฑุฉ ููุชุฃูุฏ
    composite_odds = [9, 15, 21, 25, 27]  # ุฃุนุฏุงุฏ ูุฑูุจุฉ ูููุฉ
    matrix_numbers = sorted(list(set(prime_odds_for_matrix + composite_odds)))
    
    print(f"๐ข ุฃุนุฏุงุฏ ุงููุตูููุฉ: {matrix_numbers}")
    print(f"   ุญุฌู ุงููุตูููุฉ: {len(matrix_numbers)} x {len(matrix_numbers)}")
    
    # ุงูุฎุทูุฉ 3: ุฅูุดุงุก ูุตูููุฉ ุงูุถุฑุจ ุงููุญุณูุฉ
    print(f"\n๐ข ุฅูุดุงุก ูุตูููุฉ ุงูุถุฑุจ ุงููุญุณูุฉ...")
    
    multiplication_products = set()
    matrix_data = {}
    
    # ุฅูุดุงุก ุงููุตูููุฉ ูุญูุธ ุงูุจูุงูุงุช
    for i, num1 in enumerate(matrix_numbers):
        for j, num2 in enumerate(matrix_numbers):
            product = num1 * num2
            if product <= max_num and product % 2 == 1:  # ููุท ุงูุฃุนุฏุงุฏ ุงููุฑุฏูุฉ
                multiplication_products.add(product)
                
                # ุญูุธ ูุนูููุงุช ุฅุถุงููุฉ
                if product not in matrix_data:
                    matrix_data[product] = []
                matrix_data[product].append((num1, num2, i, j))
    
    print(f"   ููุงุชุฌ ุงูุถุฑุจ ุงููุฑุฏูุฉ: {len(multiplication_products)}")
    print(f"   ุฃูุซูุฉ: {sorted(list(multiplication_products))[:20]}")
    
    # ุงูุฎุทูุฉ 4: ุงูุญุฐู ุงูุฐูู ูุน ุชุชุจุน ุงูุฃุณุจุงุจ
    print(f"\n๐๏ธ ุงูุญุฐู ุงูุฐูู ูู ุงูุฃุนุฏุงุฏ ุงููุฑุฏูุฉ...")
    
    removed_numbers = []
    removal_reasons = {}
    
    for num in odd_numbers:
        if num in multiplication_products:
            removed_numbers.append(num)
            removal_reasons[num] = matrix_data[num]
    
    remaining_numbers = [num for num in odd_numbers if num not in multiplication_products]
    
    # ุฅุถุงูุฉ ุงูุนุฏุฏ 2
    prime_candidates = [2] + remaining_numbers
    
    print(f"   ุงูุฃุนุฏุงุฏ ุงูุฃุตููุฉ: {len(odd_numbers)}")
    print(f"   ุงููุญุฐููุฉ: {len(removed_numbers)}")
    print(f"   ุงููุชุจููุฉ: {len(remaining_numbers)}")
    print(f"   ูุน ุฅุถุงูุฉ 2: {len(prime_candidates)}")
    
    return {
        'odd_numbers': odd_numbers,
        'matrix_numbers': matrix_numbers,
        'multiplication_products': multiplication_products,
        'matrix_data': matrix_data,
        'removed_numbers': removed_numbers,
        'removal_reasons': removal_reasons,
        'remaining_numbers': remaining_numbers,
        'prime_candidates': prime_candidates
    }

def multi_stage_sieve(max_num=500):
    """
    ุบุฑุจุงู ูุชุนุฏุฏ ุงููุฑุงุญู ููุฃุนุฏุงุฏ ุงููุจูุฑุฉ
    """
    
    print(f"\n๐ ุงูุบุฑุจุงู ูุชุนุฏุฏ ุงููุฑุงุญู ุญุชู {max_num}")
    print("="*60)
    
    # ุงููุฑุญูุฉ 1: ุงูุบุฑุจุงู ุงูุฃุณุงุณู
    stage1_result = enhanced_matrix_sieve(min(max_num, 200))
    current_candidates = stage1_result['prime_candidates']
    
    print(f"๐ ุงููุฑุญูุฉ 1 ุงูุชูุช: {len(current_candidates)} ูุฑุดุญ")
    
    if max_num <= 200:
        return stage1_result
    
    # ุงููุฑุญูุฉ 2: ุชุทุจูู ุงูุบุฑุจุงู ุนูู ุงููุทุงู ุงูุฃูุจุฑ
    print(f"\n๐ ุงููุฑุญูุฉ 2: ุงููุทุงู {200}-{max_num}")
    
    # ุงุณุชุฎุฏุงู ุงููุฑุดุญูู ูู ุงููุฑุญูุฉ ุงูุฃููู ูุฃุณุงุณ ูููุตูููุฉ
    confirmed_primes = [p for p in current_candidates if p <= int(np.sqrt(max_num)) + 1]
    
    # ุงูุฃุนุฏุงุฏ ุงููุฑุฏูุฉ ูู ุงููุทุงู ุงูุฌุฏูุฏ
    new_odd_numbers = [n for n in range(201, max_num + 1, 2)]
    
    # ุฅูุดุงุก ููุงุชุฌ ุถุฑุจ ุฌุฏูุฏุฉ
    new_products = set()
    for prime in confirmed_primes:
        for odd in new_odd_numbers:
            if prime * odd <= max_num:
                new_products.add(prime * odd)
    
    # ุญุฐู ุงูููุงุชุฌ ุงูุฌุฏูุฏุฉ
    final_candidates = current_candidates + [n for n in new_odd_numbers if n not in new_products]
    
    print(f"   ุฃุนุฏุงุฏ ุฌุฏูุฏุฉ: {len(new_odd_numbers)}")
    print(f"   ููุงุชุฌ ุฌุฏูุฏุฉ: {len(new_products)}")
    print(f"   ูุฑุดุญูู ููุงุฆููู: {len(final_candidates)}")
    
    return {
        'stage1_result': stage1_result,
        'new_odd_numbers': new_odd_numbers,
        'new_products': new_products,
        'final_candidates': sorted(final_candidates),
        'confirmed_primes': confirmed_primes
    }

def extract_matrix_features(number, matrix_result):
    """
    ุงุณุชุฎุฑุงุฌ ููุฒุงุช ูุตููููุฉ ูุนุฏุฏ ูุนูู
    """
    
    features = {}
    
    # ุงูููุฒุฉ 1: ูู ุงูุนุฏุฏ ูู ููุงุชุฌ ุงูุถุฑุจุ
    features['in_products'] = 1 if number in matrix_result['multiplication_products'] else 0
    
    # ุงูููุฒุฉ 2: ุนุฏุฏ ุทุฑู ุชูููู ุงูุนุฏุฏ
    if number in matrix_result['matrix_data']:
        features['formation_ways'] = len(matrix_result['matrix_data'][number])
        
        # ุงูููุฒุฉ 3: ุฃุตุบุฑ ุนุงูู
        factors = [min(pair[0], pair[1]) for pair in matrix_result['matrix_data'][number]]
        features['smallest_factor'] = min(factors)
        
        # ุงูููุฒุฉ 4: ุฃูุจุฑ ุนุงูู
        features['largest_factor'] = max([max(pair[0], pair[1]) for pair in matrix_result['matrix_data'][number]])
        
        # ุงูููุฒุฉ 5: ูุชูุณุท ุงูุนูุงูู
        all_factors = []
        for pair in matrix_result['matrix_data'][number]:
            all_factors.extend([pair[0], pair[1]])
        features['average_factor'] = np.mean(all_factors)
        
    else:
        features['formation_ways'] = 0
        features['smallest_factor'] = number  # ุงูุนุฏุฏ ููุณู
        features['largest_factor'] = number
        features['average_factor'] = number
    
    # ุงูููุฒุฉ 6: ูููุน ูู ูุงุฆูุฉ ุงูุฃุนุฏุงุฏ ุงููุฑุฏูุฉ
    if number in matrix_result['odd_numbers']:
        features['odd_position'] = matrix_result['odd_numbers'].index(number)
    else:
        features['odd_position'] = -1
    
    # ุงูููุฒุฉ 7: ุงููุณุงูุฉ ูู ุฃูุฑุจ ุนุฏุฏ ูู ุงููุตูููุฉ
    if matrix_result['matrix_numbers']:
        distances = [abs(number - m) for m in matrix_result['matrix_numbers']]
        features['distance_to_matrix'] = min(distances)
    else:
        features['distance_to_matrix'] = 0
    
    # ุงูููุฒุฉ 8: ููุท ุงูุฑูู (ุขุญุงุฏ)
    features['last_digit'] = number % 10
    
    # ุงูููุฒุฉ 9: ูุงุจููุฉ ุงููุณูุฉ ุนูู ุงูุฃุนุฏุงุฏ ุงูุตุบูุฑุฉ
    small_primes = [3, 5, 7, 11, 13]
    for prime in small_primes:
        features[f'divisible_by_{prime}'] = 1 if number % prime == 0 else 0
    
    return features

def create_enhanced_visualization(enhanced_result, verification_result):
    """
    ุชุตูุฑ ูุญุณู ูููุชุงุฆุฌ
    """
    
    print(f"\n๐ ุฅูุดุงุก ุชุตูุฑ ูุญุณู...")
    
    try:
        fig, ((ax1, ax2), (ax3, ax4)) = plt.subplots(2, 2, figsize=(16, 12))
        fig.suptitle('ุงูุบุฑุจุงู ุงููุตูููู ุงููุญุณู - ุชุญููู ุดุงูู', fontsize=16, fontweight='bold')
        
        # 1. ููุงุฑูุฉ ุงููุชุงุฆุฌ ุงููุญุณูุฉ
        traditional_primes = verification_result['traditional_primes']
        matrix_primes = verification_result['matrix_primes']
        
        # ุนุฑุถ ุฃูู 50 ุนุฏุฏ ูููุถูุญ
        x_range = range(2, min(max(traditional_primes) + 1, 100))
        traditional_indicators = [1 if x in traditional_primes else 0 for x in x_range]
        matrix_indicators = [1 if x in matrix_primes else 0 for x in x_range]
        
        ax1.plot(x_range, traditional_indicators, 'bo-', label='ุงูุทุฑููุฉ ุงูุชูููุฏูุฉ', markersize=3)
        ax1.plot(x_range, matrix_indicators, 'ro-', label='ุงูุบุฑุจุงู ุงููุตูููู', markersize=3, alpha=0.7)
        ax1.set_title('ููุงุฑูุฉ ุงููุชุงุฆุฌ ุงููุญุณูุฉ')
        ax1.set_xlabel('ุงูุนุฏุฏ')
        ax1.set_ylabel('ุฃููู (1) ุฃู ูุง (0)')
        ax1.legend()
        ax1.grid(True, alpha=0.3)
        
        # 2. ุชุญููู ุงูุฃุฎุทุงุก
        correct_primes = verification_result['correct_primes']
        missed_primes = verification_result['missed_primes']
        false_primes = verification_result['false_primes']
        
        categories = ['ุตุญูุญุฉ', 'ููููุฏุฉ', 'ุฎุงุทุฆุฉ']
        counts = [len(correct_primes), len(missed_primes), len(false_primes)]
        colors = ['green', 'orange', 'red']
        
        bars = ax2.bar(categories, counts, color=colors, alpha=0.7)
        ax2.set_title('ุชุญููู ุฏูุฉ ุงููุชุงุฆุฌ')
        ax2.set_ylabel('ุนุฏุฏ ุงูุฃุนุฏุงุฏ ุงูุฃูููุฉ')
        
        # ุฅุถุงูุฉ ููู ุนูู ุงูุฃุนูุฏุฉ
        for bar, count in zip(bars, counts):
            height = bar.get_height()
            ax2.text(bar.get_x() + bar.get_width()/2., height + 0.5,
                    str(count), ha='center', va='bottom', fontweight='bold')
        
        ax2.grid(True, alpha=0.3)
        
        # 3. ุชูุฒูุน ุฃุณุจุงุจ ุงูุญุฐู
        removal_reasons = enhanced_result['removal_reasons']
        formation_ways = [len(reasons) for reasons in removal_reasons.values()]
        
        if formation_ways:
            ax3.hist(formation_ways, bins=range(1, max(formation_ways) + 2), 
                    alpha=0.7, color='skyblue', edgecolor='black')
            ax3.set_title('ุชูุฒูุน ุทุฑู ุชูููู ุงูุฃุนุฏุงุฏ ุงููุญุฐููุฉ')
            ax3.set_xlabel('ุนุฏุฏ ุทุฑู ุงูุชูููู')
            ax3.set_ylabel('ุงูุชูุฑุงุฑ')
            ax3.grid(True, alpha=0.3)
        
        # 4. ููุงููุณ ุงูุฃุฏุงุก ุงููุญุณูุฉ
        metrics = ['ุงูุฏูุฉ\n(Accuracy)', 'ุงูุฏูุฉ\n(Precision)', 'ุงูุงุณุชุฏุนุงุก\n(Recall)']
        values = [
            verification_result['accuracy'],
            verification_result['precision'],
            verification_result.get('recall', 0)
        ]
        colors = ['lightgreen', 'lightblue', 'lightcoral']
        
        bars = ax4.bar(metrics, values, color=colors, alpha=0.8, edgecolor='black')
        ax4.set_title('ููุงููุณ ุงูุฃุฏุงุก ุงููุญุณูุฉ')
        ax4.set_ylabel('ุงููุณุจุฉ ุงููุฆููุฉ (%)')
        ax4.set_ylim(0, 105)
        
        # ุฅุถุงูุฉ ููู ุนูู ุงูุฃุนูุฏุฉ
        for bar, value in zip(bars, values):
            height = bar.get_height()
            ax4.text(bar.get_x() + bar.get_width()/2., height + 1,
                    f'{value:.1f}%', ha='center', va='bottom', fontweight='bold', fontsize=10)
        
        ax4.grid(True, alpha=0.3)
        
        plt.tight_layout()
        
        # ุญูุธ ุงูุฑุณู
        timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
        filename = f'enhanced_matrix_sieve_{timestamp}.png'
        plt.savefig(filename, dpi=300, bbox_inches='tight')
        print(f"   โ ุชู ุญูุธ ุงูุชุตูุฑ ูู: {filename}")
        
        plt.show()
        
    except Exception as e:
        print(f"   โ ุชุนุฐุฑ ุฅูุดุงุก ุงูุชุตูุฑ: {e}")

def verify_enhanced_results(enhanced_result, max_num):
    """
    ุงูุชุญูู ูู ุงููุชุงุฆุฌ ุงููุญุณูุฉ
    """
    
    print(f"\nโ ุงูุชุญูู ูู ุงููุชุงุฆุฌ ุงููุญุณูุฉ...")
    
    # ุงูุทุฑููุฉ ุงูุชูููุฏูุฉ
    def is_prime_traditional(n):
        if n < 2:
            return False
        for i in range(2, int(n**0.5) + 1):
            if n % i == 0:
                return False
        return True
    
    traditional_primes = [n for n in range(2, max_num + 1) if is_prime_traditional(n)]
    
    # ุงููุชุงุฆุฌ ุงููุตููููุฉ
    if 'final_candidates' in enhanced_result:
        matrix_primes = sorted(enhanced_result['final_candidates'])
    else:
        matrix_primes = sorted(enhanced_result['prime_candidates'])
    
    print(f"   ุงูุทุฑููุฉ ุงูุชูููุฏูุฉ: {len(traditional_primes)} ุนุฏุฏ ุฃููู")
    print(f"   ุงูุทุฑููุฉ ุงููุตููููุฉ: {len(matrix_primes)} ุนุฏุฏ ุฃููู")
    
    # ููุงุฑูุฉ ุงููุชุงุฆุฌ
    traditional_set = set(traditional_primes)
    matrix_set = set(matrix_primes)
    
    correct_primes = traditional_set & matrix_set
    missed_primes = traditional_set - matrix_set
    false_primes = matrix_set - traditional_set
    
    print(f"\n๐ ูุชุงุฆุฌ ุงูููุงุฑูุฉ ุงููุญุณูุฉ:")
    print(f"   ุฃุนุฏุงุฏ ุฃูููุฉ ุตุญูุญุฉ: {len(correct_primes)}")
    print(f"   ุฃุนุฏุงุฏ ุฃูููุฉ ููููุฏุฉ: {len(missed_primes)}")
    print(f"   ุฃุนุฏุงุฏ ุฎุงุทุฆุฉ: {len(false_primes)}")
    
    if missed_primes:
        print(f"   ุงูููููุฏุฉ: {sorted(list(missed_primes))}")
    if false_primes:
        print(f"   ุงูุฎุงุทุฆุฉ: {sorted(list(false_primes))}")
    
    # ุญุณุงุจ ุงูููุงููุณ
    accuracy = len(correct_primes) / len(traditional_set) * 100 if traditional_set else 0
    precision = len(correct_primes) / len(matrix_set) * 100 if matrix_set else 0
    recall = len(correct_primes) / len(traditional_set) * 100 if traditional_set else 0
    
    print(f"\n๐ฏ ููุงููุณ ุงูุฃุฏุงุก ุงููุญุณูุฉ:")
    print(f"   ุงูุฏูุฉ (Accuracy): {accuracy:.2f}%")
    print(f"   ุงูุฏูุฉ (Precision): {precision:.2f}%")
    print(f"   ุงูุงุณุชุฏุนุงุก (Recall): {recall:.2f}%")
    
    return {
        'traditional_primes': traditional_primes,
        'matrix_primes': matrix_primes,
        'correct_primes': correct_primes,
        'missed_primes': missed_primes,
        'false_primes': false_primes,
        'accuracy': accuracy,
        'precision': precision,
        'recall': recall
    }

def main():
    """
    ุงูุฏุงูุฉ ุงูุฑุฆูุณูุฉ ููุบุฑุจุงู ุงููุญุณู
    """
    
    print("๐ ุงูุบุฑุจุงู ุงููุตูููู ุงููุญุณู")
    print("ุชุทููุฑ ุงูููุฑุฉ ุงูุฃุตููุฉ ูุน ุฅุตูุงุญ ุงููุดุงูู ูุชุญุณูู ุงูุฃุฏุงุก")
    print("="*80)
    
    try:
        # ุงุฎุชุจุงุฑ ุงูุบุฑุจุงู ุงููุญุณู
        max_num = 200
        enhanced_result = enhanced_matrix_sieve(max_num)
        
        # ุงูุชุญูู ูู ุงููุชุงุฆุฌ
        verification = verify_enhanced_results(enhanced_result, max_num)
        
        # ุฅูุดุงุก ุงูุชุตูุฑ
        create_enhanced_visualization(enhanced_result, verification)
        
        # ุงุฎุชุจุงุฑ ุงูุบุฑุจุงู ูุชุนุฏุฏ ุงููุฑุงุญู
        print(f"\n" + "="*60)
        multi_stage_result = multi_stage_sieve(300)
        multi_verification = verify_enhanced_results(multi_stage_result, 300)
        
        print(f"\n" + "="*80)
        print(f"๐ ุงููุชุงุฆุฌ ุงูููุงุฆูุฉ:")
        print(f"="*80)
        print(f"๐ ุงูุบุฑุจุงู ุงููุญุณู (ุญุชู {max_num}):")
        print(f"   ุฏูุฉ: {verification['accuracy']:.2f}%")
        print(f"   ุฏูุฉ ุงูุชูุจุค: {verification['precision']:.2f}%")
        print(f"   ุงุณุชุฏุนุงุก: {verification['recall']:.2f}%")
        
        print(f"\n๐ ุงูุบุฑุจุงู ูุชุนุฏุฏ ุงููุฑุงุญู (ุญุชู 300):")
        print(f"   ุฏูุฉ: {multi_verification['accuracy']:.2f}%")
        print(f"   ุฏูุฉ ุงูุชูุจุค: {multi_verification['precision']:.2f}%")
        print(f"   ุงุณุชุฏุนุงุก: {multi_verification['recall']:.2f}%")
        
        print(f"\n๐ ุงูููุฑุฉ ูุญุณูุฉ ูุฌุงูุฒุฉ ููุฏูุฌ ูุน GSE!")
        
        return enhanced_result, verification, multi_stage_result, multi_verification
        
    except Exception as e:
        print(f"\nโ ุฎุทุฃ ูู ุงูุบุฑุจุงู ุงููุญุณู: {e}")
        import traceback
        traceback.print_exc()
        return None, None, None, None

if __name__ == "__main__":
    main()
